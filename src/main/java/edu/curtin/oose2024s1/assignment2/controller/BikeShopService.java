package edu.curtin.oose2024s1.assignment2.controller;

import edu.curtin.oose2024s1.assignment2.factory.MessageHandlerFactory;
import edu.curtin.oose2024s1.assignment2.model.*;           //BikeShopInfo and state classes;
import edu.curtin.oose2024s1.assignment2.controller.messagehandler.MessageHandler;
import edu.curtin.oose2024s1.assignment2.observer.*;
import edu.curtin.oose2024s1.assignment2.exceptions.*;

import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * Contains the main processing logic of the program, processing messages from
 * BikeShopInput and handling them appropriately according to what message is
 * processed.
 */
public class BikeShopService
{
    private static final Logger logger = Logger.getLogger(BikeShopService.class.getName());

    private final MessageHandlerFactory messageHandlerFactory;
    private final Subject messageSubject;
    private final BikeShopInfo info;

    public BikeShopService(MessageHandlerFactory messageHandlerFactory, Subject messageSubject, int initialMoney)
    {
        this.messageHandlerFactory = messageHandlerFactory;
        this.messageSubject = messageSubject;
        this.info = new BikeShopInfo(initialMoney);
    }

    //Processes message from BikeShopInput, getting type and creating handler for that type.
    public void processMessage(String message)
    {
        try
        {
            if(isValidMessage(message))
            {
                logger.info(() -> "Getting message type from string: " + message);
                String messageType = getMessageType(message);
                logger.info(() -> "Processed message type: " + messageType);
                MessageHandler handler = messageHandlerFactory.createMessageHandler(messageType);
                handler.handleMessage(info, message);
                messageSubject.notifyObservers(message);
            }
            else
            {
                throw new InvalidMessageException("Invalid message: " + message);
            }
        }
        catch(InvalidMessageException | MessageHandlingException e)
        {
            logger.warning(() -> "Caught expected invalid message generated by BikeShopInput: " + message);
            handleFailure(message, e.getMessage());
        }
    }

    public void updateBikeStates()
    {
        info.updateBikeStates();
    }

    public void attachObserver(Observer observer)
    {
        messageSubject.attach(observer);
    }

    public int getMoney()
    {
        return info.getMoney();
    }

    public int getAvailableCount()
    {
        return info.countBikesByState(AvailableState.class);
    }
        
    public int getServicedCount()
    {
        return info.countBikesByState(ServicingState.class);
    }
        
    public int getPickUpCount()
    {
        return info.countBikesByState(PickUpState.class);
    }

    private String getMessageType(String message)
    {
        return message.split(" ")[0];
    }

    //Checks if message is valid
    private boolean isValidMessage(String message)
    {
        String[] parts = message.split(" ");
        String type = parts[0];
        switch(type)
        {
            case "DELIVERY":
            case "PURCHASE-IN-STORE":
                return parts.length == 1;

            case "DROP-OFF":
            case "PURCHASE-ONLINE":
            case "PICK-UP":
                return parts.length == 2 && parts[1].contains("@");

            default:
                return false;
        }
    }

    //Handles messages that fail outputting FAILURE.
    private void handleFailure(String message, String cause)
    {
        String failMessage = "FAILURE: " + cause + " - " + message;
        System.out.println(failMessage);
        messageSubject.notifyObservers(failMessage);
    }



}